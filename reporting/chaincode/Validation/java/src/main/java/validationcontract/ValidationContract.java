/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package validationcontract;

import java.util.ArrayList;
import java.util.List;

import org.hyperledger.fabric.contract.ClientIdentity;
import org.hyperledger.fabric.contract.Context;
import org.hyperledger.fabric.contract.ContractInterface;
import org.hyperledger.fabric.contract.annotation.Contact;
import org.hyperledger.fabric.contract.annotation.Contract;
import org.hyperledger.fabric.contract.annotation.Default;
import org.hyperledger.fabric.contract.annotation.Info;
import org.hyperledger.fabric.contract.annotation.License;
import org.hyperledger.fabric.contract.annotation.Transaction;
import org.hyperledger.fabric.shim.ChaincodeException;
import org.hyperledger.fabric.shim.ChaincodeStub;
import org.hyperledger.fabric.shim.Chaincode.Response;
import org.hyperledger.fabric.shim.Chaincode.Response.Status;
import org.hyperledger.fabric.shim.ledger.CompositeKey;
import org.hyperledger.fabric.shim.ledger.KeyValue;
import org.hyperledger.fabric.shim.ledger.QueryResultsIterator;

import com.google.gson.Gson;
import com.google.gson.JsonObject;

@Contract(
        name = "ValidationContract",
        info = @Info(
                title = "Validation Contract",
                description = "This smart contract checks the necessasry certificates",
                version = "0.0.1-Alpha",
                license = @License(
                        name = "Apache 2.0 License",
                        url = "http://www.apache.org/licenses/LICENSE-2.0.html"),
                contact = @Contact(
                        email = "janbiermann24@gmail.com",
                        name = "Jan")))

@Default
public class ValidationContract implements ContractInterface {

    String keyPrefixString = "sensorid~org";


    @Transaction(intent = Transaction.TYPE.SUBMIT)
    public String init(final Context context){

        JsonObject json = new JsonObject();
        json.addProperty("status", "200");
        json.addProperty("response", "Init");
        return json.toString();

    }

    @Transaction(intent = Transaction.TYPE.SUBMIT)
    public void createValidationAsset(Context ctx, String sensorid, String ownerorganisation, String... requiredCertificates){
        
        if(assetExists(ctx, sensorid, ownerorganisation)){
            throw new ChaincodeException("ValidationAsset already exists");
        }

        final ClientIdentity clientIdentity = ctx.getClientIdentity();
        final String cmspID = clientIdentity.getMSPID();

        if(cmspID.equals(ownerorganisation)){
            throw new ChaincodeException("You are not allowed to create this asset");
        }

        ChaincodeStub stub = ctx.getStub();
        ValidationAsset asset = new ValidationAsset(sensorid, ownerorganisation, requiredCertificates);
        CompositeKey key = new CompositeKey(keyPrefixString, new String[] {sensorid, ownerorganisation});
        stub.putStringState(key.toString(), asset.toJSON());
    }

    @Transaction(intent = Transaction.TYPE.EVALUATE)
    public boolean assetExists(Context ctx, String sensorid, String org){
        ChaincodeStub stub = ctx.getStub();
        CompositeKey key = new CompositeKey(keyPrefixString, new String[] {sensorid, org});
        String result = stub.getStringState(key.toString());
        return (result != null && result.length() > 0);
    }

    @Transaction(intent = Transaction.TYPE.EVALUATE)
    public String getValidationAsset(Context ctx, String sensorid, String org){

        if(!assetExists(ctx, sensorid, org)){
            throw new ChaincodeException("Asset does not exist");
        }

        ChaincodeStub stub = ctx.getStub();
        CompositeKey key = new CompositeKey(keyPrefixString, new String[] {sensorid, org});
        return stub.getStringState(key.toString());
    }

    @Transaction(intent = Transaction.TYPE.SUBMIT)
    public void updateCertifications(Context ctx, String sensorid, String org, String... certs){
        if(!assetExists(ctx, sensorid, org)){
            throw new ChaincodeException("Asset does not exist");
        }

        final ClientIdentity clientIdentity = ctx.getClientIdentity();
        final String cmspID = clientIdentity.getMSPID();
        
        if(cmspID.equals(org)){
            throw new ChaincodeException("You are not allowed to update this asset");
        }

        ChaincodeStub stub = ctx.getStub();
        CompositeKey key = new CompositeKey(keyPrefixString, new String[] {sensorid, org});
        ValidationAsset asset = new ValidationAsset(sensorid, org, certs);
        stub.putStringState(key.toString(), asset.toJSON());
    }

    @Transaction(intent = Transaction.TYPE.SUBMIT)
    public boolean checkCertificates(Context ctx, String sensorid, String org){

        if(!assetExists(ctx, sensorid, org)){
            throw new ChaincodeException("Asset does not exist");
        }

        ChaincodeStub stub = ctx.getStub();
        ValidationAsset asset = ValidationAsset.fromJSON(getValidationAsset(ctx, sensorid, org));

        for(String chaincode: asset.getRequiredcerts()){
            Response response = stub.invokeChaincodeWithStringArgs(chaincode, List.of("isValid", sensorid, org), stub.getChannelId());  
            if(response.getStatus() != Status.SUCCESS){
                throw new ChaincodeException("Invalid Certificate");
            }
        }
        
        return true;
    }

    @Transaction(intent = Transaction.TYPE.SUBMIT)
    public void deleteValidationAsset(Context ctx, String sensorid, String org){

        if(!assetExists(ctx, sensorid, org)){
            throw new ChaincodeException("Asset does not exist");
        }

        ChaincodeStub stub = ctx.getStub();
        CompositeKey key = new CompositeKey(keyPrefixString, new String[] {sensorid, org});
        stub.delState(key.toString());
    }

    @Transaction(intent = Transaction.TYPE.EVALUATE)
    public String queryAll(Context ctx){

        ChaincodeStub stub = ctx.getStub();
        CompositeKey key = new CompositeKey(keyPrefixString);
        List<ValidationAsset> assetList = new ArrayList<>();

        QueryResultsIterator<KeyValue> iterator = stub.getStateByPartialCompositeKey(key.toString());

        for(KeyValue kv: iterator){
            assetList.add(ValidationAsset.fromJSON(kv.getStringValue()));
        } 
        return new Gson().toJson(assetList);
    }        


}
