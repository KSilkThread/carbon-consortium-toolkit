[
    {
        "id": "f7c93124508f6705",
        "type": "tab",
        "label": "TestTransaction",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e59a45358b52e49f",
        "type": "configNode",
        "name": "",
        "ccpPath": "C:\\Users\\David\\Desktop\\Uni\\Projektstudium Master\\BlockchainTest\\connections\\mychannel_connection_for_nodesdk.json",
        "walletPath": "C:\\Users\\David\\Desktop\\Uni\\Projektstudium Master\\Repository\\carbonedge\\scenarios\\coffee-roaster-MRV-ecosystem\\node-red-application\\wallet"
    },
    {
        "id": "12fed2b4f392671f",
        "type": "websocket-listener",
        "path": "/ws/loginstatus",
        "wholemsg": "false"
    },
    {
        "id": "3c91dd9cb2e0fbc3",
        "type": "http in",
        "z": "f7c93124508f6705",
        "name": "",
        "url": "/getCertificate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "43ff31d47f8b98c3"
            ]
        ]
    },
    {
        "id": "43ff31d47f8b98c3",
        "type": "function",
        "z": "f7c93124508f6705",
        "name": "Extract Sensor and Org",
        "func": "msg.args = [msg.req.query.sensor, msg.req.query.org];\nconsole.log(msg);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 700,
        "wires": [
            [
                "07522e151960a7ba"
            ]
        ]
    },
    {
        "id": "e79bbd0539c23f7e",
        "type": "txNode",
        "z": "f7c93124508f6705",
        "name": "",
        "userid": "Admin",
        "channel": "mychannel",
        "chaincode": "certificateCC",
        "cmd": "getCertificate",
        "configurations": "e59a45358b52e49f",
        "transactiontype": "evaluate",
        "x": 830,
        "y": 600,
        "wires": [
            [
                "8a0902029c7bade7"
            ]
        ]
    },
    {
        "id": "07522e151960a7ba",
        "type": "http response",
        "z": "f7c93124508f6705",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 700,
        "wires": []
    },
    {
        "id": "8ee46d73ec82cdba",
        "type": "inject",
        "z": "f7c93124508f6705",
        "name": "Start reading of cert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "e0f523da768240c8"
            ]
        ]
    },
    {
        "id": "e0f523da768240c8",
        "type": "http request",
        "z": "f7c93124508f6705",
        "name": "Query Transponder API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:3000/api/transponder",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "ea91208865a3da38"
            ]
        ]
    },
    {
        "id": "ea91208865a3da38",
        "type": "function",
        "z": "f7c93124508f6705",
        "name": "Extract securityID",
        "func": "var data = JSON.parse(msg.payload);\nvar securityID = data.securityID;\nvar securityIDObject = JSON.parse(securityID);\nvar mspId = securityIDObject.mspId;\nvar loginStatus = \"\";\nif (securityID !== \"\" && mspId === \"org0-example-com\"){\n    loginStatus = \"owner\";\n} else if (securityID !== \"\" && mspId === \"org1-example-com\"){\n    loginStatus = \"inspector\";\n}else{\n    loginStatus = \"nobody\";\n}\n\ntry {\n    securityID = JSON.parse(securityID);\n    msg.payload = JSON.stringify(securityID, null, 2);\n} catch (e) {\n    msg.payload = securityID;\n}\n\nvar wsMessage = JSON.stringify({ loggedIn: loginStatus });\n\nvar wsMsg = { payload: wsMessage };\nconsole.log(msg);\nreturn [msg, wsMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 120,
        "wires": [
            [
                "93ba1f490255dac2"
            ],
            [
                "0e4043ae1b4c7689"
            ]
        ]
    },
    {
        "id": "93ba1f490255dac2",
        "type": "file",
        "z": "f7c93124508f6705",
        "name": "SaveToFile",
        "filename": "C:\\Users\\David\\Desktop\\Uni\\Projektstudium Master\\Repository\\carbonedge\\scenarios\\coffee-roaster-MRV-ecosystem\\node-red-application\\wallet\\Admin.id",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 950,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "18526c976eb59e2a",
        "type": "comment",
        "z": "f7c93124508f6705",
        "name": "Exposed HTTP Endpoints",
        "info": "",
        "x": 170,
        "y": 640,
        "wires": []
    },
    {
        "id": "0e4043ae1b4c7689",
        "type": "websocket out",
        "z": "f7c93124508f6705",
        "name": "",
        "server": "12fed2b4f392671f",
        "client": "",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "143d50f61ab9cd91",
        "type": "http in",
        "z": "f7c93124508f6705",
        "name": "",
        "url": "/startCertification",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "17ca9a2e85a5916c"
            ]
        ]
    },
    {
        "id": "17ca9a2e85a5916c",
        "type": "debug",
        "z": "f7c93124508f6705",
        "name": "Certification Started",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 780,
        "wires": []
    },
    {
        "id": "b3ac0ee0649388f1",
        "type": "http in",
        "z": "f7c93124508f6705",
        "name": "",
        "url": "/endCertification",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 860,
        "wires": [
            [
                "24066b09ccf81248"
            ]
        ]
    },
    {
        "id": "24066b09ccf81248",
        "type": "debug",
        "z": "f7c93124508f6705",
        "name": "Certification Ended",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 860,
        "wires": []
    },
    {
        "id": "c6a9ea60627f6887",
        "type": "http in",
        "z": "f7c93124508f6705",
        "name": "",
        "url": "/getEmissionData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 940,
        "wires": [
            [
                "694d2f0c3c6ab0ad"
            ]
        ]
    },
    {
        "id": "694d2f0c3c6ab0ad",
        "type": "http request",
        "z": "f7c93124508f6705",
        "name": "Query Artisan API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:8080/emissions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 940,
        "wires": [
            [
                "66a06926c34df3e4"
            ]
        ]
    },
    {
        "id": "66a06926c34df3e4",
        "type": "http response",
        "z": "f7c93124508f6705",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 880,
        "y": 940,
        "wires": []
    },
    {
        "id": "afee76c24cbb9665",
        "type": "http in",
        "z": "f7c93124508f6705",
        "name": "",
        "url": "/getEmissionDataTest",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "4bf9ce117e6d4e65"
            ]
        ]
    },
    {
        "id": "74c08b749d603851",
        "type": "http response",
        "z": "f7c93124508f6705",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 880,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4bf9ce117e6d4e65",
        "type": "function",
        "z": "f7c93124508f6705",
        "name": "Return Test data",
        "func": "console.log(msg);\nmsg.payload = {\n    \"BTU_batch\": 239123.388,\n    \"BTU_batch_per_green_kg\": 11956.169,\n    \"CO2_batch\": 15999.225,\n    \"BTU_preheat\": 209123.388,\n    \"CO2_preheat\": 13999,\n    \"BTU_bbp\": 97000,\n    \"CO2_bbp\": 7000,\n    \"BTU_cooling\": 17000,\n    \"CO2_cooling\": 2000,\n    \"BTU_roast\": 239123.388,\n    \"BTU_roast_per_green_kg\": 11956.169,\n    \"CO2_roast\": 15999.225,\n    \"CO2_batch_per_green_kg\": 799.961,\n    \"CO2_roast_per_green_kg\": 799.961,\n    \"BTU_LPG\": 234998.917,\n    \"BTU_NG\": 0,\n    \"BTU_ELEC\": 4124.471,\n    \"KWH_batch_per_green_kg\": 3.504,\n    \"KWH_roast_per_green_kg\": 3.504,\n}\nconsole.log(msg);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1020,
        "wires": [
            [
                "74c08b749d603851"
            ]
        ]
    },
    {
        "id": "f4b07ad56b01e7f2",
        "type": "catch",
        "z": "f7c93124508f6705",
        "name": "Error Catching",
        "scope": null,
        "uncaught": false,
        "x": 790,
        "y": 760,
        "wires": [
            [
                "6f78b6b2ca562f41"
            ]
        ]
    },
    {
        "id": "6f78b6b2ca562f41",
        "type": "debug",
        "z": "f7c93124508f6705",
        "name": "ErrorDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 760,
        "wires": []
    },
    {
        "id": "bb6bc4ae41794c99",
        "type": "comment",
        "z": "f7c93124508f6705",
        "name": "Bedeutung der Daten",
        "info": "The Artisan Energy Calculator provides estimates for energy consumption and CO2 emission across four phases of the roasting process,\nPre-Heating at the start of the roast session, Between Batches (BBP), the Roast batch itself and the roaster Cooling at the end of the session.\n\nBTU = British Thermal Units\nKWH = Kilowattstunden\nCO2 = Kohlenstoffdioxid\n\nEnergie verbraucht durch Gasbrenner oder elektrische Heizelemente. Gasbrenner verursachen Co2 Emissionen. Schätzung des CO2 durch Gasart und Power Rating des Brenners. \nCo2 des Stroms wird ebenfalls ausgegeben, dafür kann in Artisan die zusammensetzung der Energieerzeugung aus der vorangegangenen Energiesupplychain eingstellt werden. Daher errechnet sich der Wert.\n",
        "x": 720,
        "y": 860,
        "wires": []
    },
    {
        "id": "a9634d7a4ea3a2c9",
        "type": "inject",
        "z": "f7c93124508f6705",
        "name": "logout",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "8a2cd92d909fb5d0"
            ]
        ]
    },
    {
        "id": "3a98235534e3bcc0",
        "type": "websocket out",
        "z": "f7c93124508f6705",
        "name": "",
        "server": "12fed2b4f392671f",
        "client": "",
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "b4f52e46ea6404fc",
        "type": "file",
        "z": "f7c93124508f6705",
        "name": "DeleteCert",
        "filename": "C:\\Users\\David\\Desktop\\Uni\\Projektstudium Master\\Repository\\carbonedge\\scenarios\\coffee-roaster-MRV-ecosystem\\node-red-application\\wallet\\Admin.id",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 950,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "8a2cd92d909fb5d0",
        "type": "http request",
        "z": "f7c93124508f6705",
        "name": "Logout Transponder API",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:3000/logout",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "0a6069c8238cf21c"
            ]
        ]
    },
    {
        "id": "0a6069c8238cf21c",
        "type": "function",
        "z": "f7c93124508f6705",
        "name": "modify file and loginstatus ",
        "func": "\nmsg.payload = \"\";\nvar wsMessage = JSON.stringify({ loggedIn: \"nobody\" });\nvar wsMsg = { payload: wsMessage };\n\nreturn [msg, wsMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "b4f52e46ea6404fc"
            ],
            [
                "3a98235534e3bcc0"
            ]
        ]
    },
    {
        "id": "b8db02d9988c0be8",
        "type": "inject",
        "z": "f7c93124508f6705",
        "name": "login ORG0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "0cc8b047ed548dce"
            ]
        ]
    },
    {
        "id": "89f7ed868be265b0",
        "type": "inject",
        "z": "f7c93124508f6705",
        "name": "login ORG1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "727595fd806ead3c"
            ]
        ]
    },
    {
        "id": "0cc8b047ed548dce",
        "type": "http request",
        "z": "f7c93124508f6705",
        "name": "Login Transponder API",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:3000/login/org0",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "adf85ecad483266c"
            ]
        ]
    },
    {
        "id": "727595fd806ead3c",
        "type": "http request",
        "z": "f7c93124508f6705",
        "name": "Login Transponder API",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:3000/login/org1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 420,
        "wires": [
            [
                "3d3371ac3f0e2ef7"
            ]
        ]
    },
    {
        "id": "adf85ecad483266c",
        "type": "debug",
        "z": "f7c93124508f6705",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "3d3371ac3f0e2ef7",
        "type": "debug",
        "z": "f7c93124508f6705",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 420,
        "wires": []
    },
    {
        "id": "57135e73c9b8dac8",
        "type": "inject",
        "z": "f7c93124508f6705",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 600,
        "wires": [
            [
                "1948d4c5f3faa110"
            ]
        ]
    },
    {
        "id": "8a0902029c7bade7",
        "type": "debug",
        "z": "f7c93124508f6705",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 600,
        "wires": []
    },
    {
        "id": "1948d4c5f3faa110",
        "type": "function",
        "z": "f7c93124508f6705",
        "name": "function 1",
        "func": "msg.args = [\"sensor3\", \"org0-example-com\"];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 600,
        "wires": [
            [
                "e79bbd0539c23f7e"
            ]
        ]
    }
]